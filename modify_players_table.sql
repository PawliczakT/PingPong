-- Add the user_id column
ALTER TABLE public.players
ADD COLUMN IF NOT EXISTS user_id UUID;

-- Add the foreign key constraint
ALTER TABLE public.players
ADD CONSTRAINT fk_user_id
FOREIGN KEY (user_id)
REFERENCES auth.users (id);

-- Add the unique constraint on user_id
ALTER TABLE public.players
ADD CONSTRAINT unique_user_id
UNIQUE (user_id);

-- Ensure other columns exist
ALTER TABLE public.players
ADD COLUMN IF NOT EXISTS name TEXT NOT NULL,
ADD COLUMN IF NOT EXISTS nickname TEXT,
ADD COLUMN IF NOT EXISTS avatar_url TEXT,
ADD COLUMN IF NOT EXISTS elo_rating INTEGER NOT NULL DEFAULT 1000,
ADD COLUMN IF NOT EXISTS wins INTEGER NOT NULL DEFAULT 0,
ADD COLUMN IF NOT EXISTS losses INTEGER NOT NULL DEFAULT 0,
ADD COLUMN IF NOT EXISTS active BOOLEAN NOT NULL DEFAULT TRUE,
ADD COLUMN IF NOT EXISTS created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
ADD COLUMN IF NOT EXISTS updated_at TIMESTAMPTZ NOT NULL DEFAULT now();

-- Alternative: Create table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.players (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID UNIQUE REFERENCES auth.users(id),
    name TEXT NOT NULL,
    nickname TEXT,
    avatar_url TEXT,
    elo_rating INTEGER NOT NULL DEFAULT 1000,
    wins INTEGER NOT NULL DEFAULT 0,
    losses INTEGER NOT NULL DEFAULT 0,
    active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- Note: If creating the table from scratch, you might want to add an id column as a primary key,
-- which is typical for Supabase tables (e.g., id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY).
-- The CREATE TABLE statement above includes this.

-- Also, consider adding an ON UPDATE trigger for `updated_at`
CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DO $$
BEGIN
  IF EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'players' AND table_schema = 'public') THEN
    IF NOT EXISTS (SELECT 1 FROM information_schema.triggers WHERE trigger_name = 'set_players_updated_at' AND event_object_table = 'players') THEN
      CREATE TRIGGER set_players_updated_at
      BEFORE UPDATE ON public.players
      FOR EACH ROW
      EXECUTE FUNCTION trigger_set_timestamp();
    END IF;
  END IF;
END
$$;

-- If the table was just created by the CREATE TABLE IF NOT EXISTS statement,
-- the trigger needs to be applied to the new table.
DO $$
BEGIN
  -- Check if the trigger exists on the table. If not, create it.
  -- This covers the case where the table was newly created.
  IF NOT EXISTS (
    SELECT 1
    FROM information_schema.triggers
    WHERE event_object_table = 'players'
    AND trigger_name = 'set_players_updated_at'
    AND trigger_schema = 'public'
  ) THEN
    CREATE TRIGGER set_players_updated_at
    BEFORE UPDATE ON public.players
    FOR EACH ROW
    EXECUTE FUNCTION trigger_set_timestamp();
  END IF;
END;
$$;

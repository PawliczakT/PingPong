import { createClient } from '@supabase/supabase-js';
import { Database } from '@/types/supabase'; // Assuming this type is generated by Supabase CLI

// Ensure these environment variables are set in your Vercel/deployment environment
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl) {
  throw new Error("Missing env.NEXT_PUBLIC_SUPABASE_URL");
}
if (!supabaseServiceRoleKey) {
  // In a real app, you might want to log this error and prevent app startup,
  // or have a fallback for local development if service role is not strictly needed everywhere.
  console.warn("Missing env.SUPABASE_SERVICE_ROLE_KEY. Admin client might not work as expected.");
  // For critical operations, throwing an error is safer:
  // throw new Error("Missing env.SUPABASE_SERVICE_ROLE_KEY");
}

// Create a Supabase client with the service role key for admin operations
// Note: This client bypasses RLS. Use with caution.
export const supabaseAsAdmin = createClient<Database>(
  supabaseUrl!,
  supabaseServiceRoleKey!, // This key should have super admin privileges
  {
    auth: {
      // autoRefreshToken: false, // Optional: Service roles don't need refresh tokens
      // persistSession: false, // Optional: Service roles don't typically persist sessions
    },
  }
);

console.log('Created lib/supabase-as-admin.ts for admin Supabase client.');
